You are given a non-empty array of integers. Each element represents the maximum number of steps you can take forward. For example, if the element at index 1
is 3, you can go from index 1 to index 2, 3, or 4. Write a function that returns the minimum number of jumps needed to reach the final index. Note that jumping
from index i to index i + x always constitutes 1 jump, no matter how large x is.
Sample input: [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3]
Sample output: 4 (3 --> 4 or 2 --> 2 or 3 --> 7 --> 3)

maxReach = 3
steps = 0
jumps = 2


function minNumberOfJumps(array){
if(array.length < 2) return 0
    let maxReach = array[0]
    let steps = array[0]
    let jumps = 0
    for(let i = 1; i < array.length - 1; i++){
      let num = array[i] + i
      maxReach = Math.max(num, maxReach)
      steps--
      if(steps === 0){
        steps = maxReach - i
        jumps++
      }
    }
    return jumps + 1
}

function minNumberOfJumps(array){
  jumps = array.map((el) => Infinity)
  jumps[0] = 0
  for(let i = 1; i < array.length; i++){
    for(let j = 0; j < i; j++){
      if(array[j] >= j - i){
        jumps[i] = Math.min(jumps[i], jumps[j] + 1)
      }
    }
  }
  return jumps[array.length - 1]
}









Time -> O(N^2)
Space -> O(N)
function minNumberOfJumps(array){
    let jumps = array.map((el) => Infinity)
    jumps[0] = 0
    for(let i = 1; i < array.length; i++){
      for(let j = 0; j < i; j++){
        if(array[j] >= i - j){
          jumps[i] = Math.min(jumps[i], jumps[j] + 1)
        }
      }
    }
    
    return jumps[array.length - 1]
}

Time -> O(n)
Space -> O(1)
function minNumberOfJumps(array){
if(array.length < 2) return 0
  let maxReach = array[0]
  let steps = array[0]
  let jumps = 0
  for(let i = 1; i< array.length - 1; i++){
    let num = array[i]
    maxReach = Math.max(maxReach, num + i)
    steps--
    if(steps === 0){
      jumps++
      steps = maxReach - i
    }
  }
  return jumps + 1
}
















